import React, { useState } from "react";
import { View, Text, TextInput, Button, FlatList, TouchableOpacity, StyleSheet, Image, Alert } from "react-native";
import Icon from "react-native-vector-icons/MaterialIcons";

export default function App() {
  const [name, setName] = useState("");
  const [yearSection, setYearSection] = useState("");
  const [course, setCourse] = useState("");
  const [users, setUsers] = useState([]);
  const [screen, setScreen] = useState("Home");
  const [selectedUser, setSelectedUser] = useState(null);
  const [isEditing, setIsEditing] = useState(false);

  // Function to add or update a user
  const handleAddOrUpdate = () => {
    if (name.trim()) {
      if (isEditing) {
        setUsers(users.map(user => (user.id === selectedUser.id ? { ...user, name, yearSection, course } : user)));
        setIsEditing(false);
        setSelectedUser(null);
      } else {
        const newUser = { id: Date.now().toString(), name, yearSection, course };
        setUsers([...users, newUser]);
      }

      // Clear input fields
      setName("");
      setYearSection("");
      setCourse("");
    }
  };

  // Function to delete a user
  const handleDelete = (userToDelete) => {
    Alert.alert("Delete User", `Are you sure you want to delete ${userToDelete.name}?`, [
      { text: "Cancel", style: "cancel" },
      { text: "Delete", style: "destructive", onPress: () => {
          setUsers(users.filter(user => user.id !== userToDelete.id));
          setScreen("Home");
        } 
      },
    ]);
  };

  // Function to edit a user
  const handleEdit = (user) => {
    setName(user.name);
    setYearSection(user.yearSection);
    setCourse(user.course);
    setSelectedUser(user);
    setIsEditing(true);
  };

  return screen === "Home" ? (
    <View style={styles.container}>
      <Text style={styles.title}>{isEditing ? "Edit User" : "Add User"}</Text>

      <TextInput style={styles.input} placeholder="Name" value={name} onChangeText={setName} autoCapitalize="words" />
      <TextInput style={styles.input} placeholder="Year/Section" value={yearSection} onChangeText={setYearSection} />
      <TextInput style={styles.input} placeholder="Course" value={course} onChangeText={setCourse} />

      <Button title={isEditing ? "Update" : "Add"} onPress={handleAddOrUpdate} />

      <FlatList
        data={users}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.listItem}>
            <TouchableOpacity onPress={() => { setSelectedUser(item); setScreen("Details"); }}>
              <Text style={styles.nameText}>{item.name}</Text>
            </TouchableOpacity>
            <View style={styles.iconContainer}>
              <TouchableOpacity onPress={() => handleEdit(item)}>
                <Icon name="edit" size={24} color="blue" />
              </TouchableOpacity>
              <TouchableOpacity onPress={() => handleDelete(item)}>
                <Icon name="delete" size={24} color="red" />
              </TouchableOpacity>
            </View>
          </View>
        )}
      />
    </View>
  ) : (
    <View style={styles.detailsContainer}>
      {/* Back Button */}
      <TouchableOpacity style={styles.backButton} onPress={() => setScreen("Home")}>
        <Icon name="arrow-back" size={30} color="black" />
      </TouchableOpacity>

      <Image source={{ uri: "https://via.placeholder.com/150" }} style={styles.image} />
      <Text style={styles.detailsText}>Name: {selectedUser?.name}</Text>
      <Text style={styles.detailsText}>Year/Section: {selectedUser?.yearSection || "N/A"}</Text>
      <Text style={styles.detailsText}>Course: {selectedUser?.course || "N/A"}</Text>

      {/* Delete Button */}
      <TouchableOpacity style={styles.deleteButton} onPress={() => handleDelete(selectedUser)}>
        <Icon name="delete" size={24} color="white" />
        <Text style={styles.deleteText}>Delete</Text>
      </TouchableOpacity>
    </View>
  );
}

// Styles
const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: "#f8f9fa" },
  title: { fontSize: 24, fontWeight: "bold", marginBottom: 10 },
  input: { borderWidth: 1, padding: 10, marginVertical: 5, borderRadius: 5 },
  listItem: { 
    flexDirection: "row", 
    justifyContent: "space-between", 
    alignItems: "center", 
    padding: 10, 
    borderBottomWidth: 1, 
    backgroundColor: "#ddd", 
    marginVertical: 5 
  },
  nameText: { fontSize: 18, fontWeight: "bold" },
  iconContainer: { flexDirection: "row", gap: 15 },

  // Details Screen
  detailsContainer: { flex: 1, justifyContent: "center", alignItems: "center", padding: 20 },
  detailsText: { fontSize: 18, marginTop: 10 },
  image: { width: 150, height: 150, borderRadius: 10 },

  // Back Button
  backButton: { 
    position: "absolute", 
    top: 40, 
    left: 20, 
    zIndex: 10, 
    backgroundColor: "white", 
    padding: 5, 
    borderRadius: 5 
  },

  // Delete Button
  deleteButton: { 
    marginTop: 20, 
    backgroundColor: "red", 
    flexDirection: "row", 
    alignItems: "center", 
    padding: 10, 
    borderRadius: 5 
  },
  deleteText: { color: "white", fontSize: 18, marginLeft: 5 },
});
